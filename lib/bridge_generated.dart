// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) =>
      RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      parseErrorData: null,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Stream<int> createAmountStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_amount_stream(port_),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kCreateAmountStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAmountStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_amount_stream",
        argNames: [],
      );

  Stream<ScanProgress> createScanProgressStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_scan_progress_stream(port_),
      parseSuccessData: _wire2api_scan_progress,
      parseErrorData: null,
      constMeta: kCreateScanProgressStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateScanProgressStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_scan_progress_stream",
        argNames: [],
      );

  Future<String> setup(
      {required String label,
      required String network,
      String? seedWords,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(label);
    var arg1 = _platform.api2wire_String(network);
    var arg2 = _platform.api2wire_opt_String(seedWords);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_setup(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kSetupConstMeta,
      argValues: [label, network, seedWords],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setup",
        argNames: ["label", "network", "seedWords"],
      );

  Future<void> startNakamoto({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_nakamoto(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kStartNakamotoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartNakamotoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_nakamoto",
        argNames: [],
      );

  Future<void> stopNakamoto({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop_nakamoto(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kStopNakamotoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopNakamotoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_nakamoto",
        argNames: [],
      );

  Future<void> restartNakamoto({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_restart_nakamoto(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kRestartNakamotoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRestartNakamotoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "restart_nakamoto",
        argNames: [],
      );

  Future<int> getPeerCount({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_peer_count(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_String,
      constMeta: kGetPeerCountConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPeerCountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_peer_count",
        argNames: [],
      );

  Future<int> getTip({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_tip(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_String,
      constMeta: kGetTipConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTipConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_tip",
        argNames: [],
      );

  Future<String> scanFrom(
      {required String blob, required int height, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    var arg1 = api2wire_u32(height);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_scan_from(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kScanFromConstMeta,
      argValues: [blob, height],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScanFromConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "scan_from",
        argNames: ["blob", "height"],
      );

  Future<int> getWalletBalance({required String blob, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_wallet_balance(port_, arg0),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kGetWalletBalanceConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetWalletBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_wallet_balance",
        argNames: ["blob"],
      );

  Future<String> getReceivingAddress({required String blob, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_receiving_address(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kGetReceivingAddressConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetReceivingAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_receiving_address",
        argNames: ["blob"],
      );

  Future<String> setWalletBirthday(
      {required String blob, required int newBirthday, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    var arg1 = api2wire_u32(newBirthday);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_wallet_birthday(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kSetWalletBirthdayConstMeta,
      argValues: [blob, newBirthday],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetWalletBirthdayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_wallet_birthday",
        argNames: ["blob", "newBirthday"],
      );

  Future<List<String>> getSpendableOutputs(
      {required String blob, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_spendable_outputs(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: _wire2api_String,
      constMeta: kGetSpendableOutputsConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSpendableOutputsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_spendable_outputs",
        argNames: ["blob"],
      );

  Future<int> transactionSize({required String psbt, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_transaction_size(port_, arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: _wire2api_String,
      constMeta: kTransactionSizeConstMeta,
      argValues: [psbt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTransactionSizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "transaction_size",
        argNames: ["psbt"],
      );

  Future<String> updateFees(
      {required String psbt,
      required int subtractFrom,
      required int feeRate,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbt);
    var arg1 = api2wire_usize(subtractFrom);
    var arg2 = _platform.api2wire_u64(feeRate);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_update_fees(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateFeesConstMeta,
      argValues: [psbt, subtractFrom, feeRate],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateFeesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_fees",
        argNames: ["psbt", "subtractFrom", "feeRate"],
      );

  Future<String> signPsbtAt(
      {required String blob,
      required String psbt,
      required int inputIndex,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    var arg1 = _platform.api2wire_String(psbt);
    var arg2 = api2wire_u32(inputIndex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign_psbt_at(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kSignPsbtAtConstMeta,
      argValues: [blob, psbt, inputIndex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignPsbtAtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_psbt_at",
        argNames: ["blob", "psbt", "inputIndex"],
      );

  Future<String> finalizePsbt({required String psbt, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_finalize_psbt(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kFinalizePsbtConstMeta,
      argValues: [psbt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizePsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_psbt",
        argNames: ["psbt"],
      );

  Future<String> markSpentFromTransaction(
      {required String blob, required String txHex, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blob);
    var arg1 = _platform.api2wire_String(txHex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mark_spent_from_transaction(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kMarkSpentFromTransactionConstMeta,
      argValues: [blob, txHex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMarkSpentFromTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mark_spent_from_transaction",
        argNames: ["blob", "txHex"],
      );

  Future<String> broadcastRawTransaction(
      {required String txHex, dynamic hint}) {
    var arg0 = _platform.api2wire_String(txHex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_broadcast_raw_transaction(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kBroadcastRawTransactionConstMeta,
      argValues: [txHex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBroadcastRawTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "broadcast_raw_transaction",
        argNames: ["txHex"],
      );

  Future<String> spendTo({required String spendingRequest, dynamic hint}) {
    var arg0 = _platform.api2wire_String(spendingRequest);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_spend_to(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kSpendToConstMeta,
      argValues: [spendingRequest],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpendToConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "spend_to",
        argNames: ["spendingRequest"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LogEntry(
      msg: _wire2api_String(arr[0]),
    );
  }

  ScanProgress _wire2api_scan_progress(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ScanProgress(
      start: _wire2api_u32(arr[0]),
      current: _wire2api_u32(arr[1]),
      end: _wire2api_u32(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class RustPlatform extends FlutterRustBridgeBase<RustWire> {
  RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_log_stream');
  late final _wire_create_log_stream =
      _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_create_amount_stream(
    int port_,
  ) {
    return _wire_create_amount_stream(
      port_,
    );
  }

  late final _wire_create_amount_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_amount_stream');
  late final _wire_create_amount_stream =
      _wire_create_amount_streamPtr.asFunction<void Function(int)>();

  void wire_create_scan_progress_stream(
    int port_,
  ) {
    return _wire_create_scan_progress_stream(
      port_,
    );
  }

  late final _wire_create_scan_progress_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_scan_progress_stream');
  late final _wire_create_scan_progress_stream =
      _wire_create_scan_progress_streamPtr.asFunction<void Function(int)>();

  void wire_setup(
    int port_,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> network,
    ffi.Pointer<wire_uint_8_list> seed_words,
  ) {
    return _wire_setup(
      port_,
      label,
      network,
      seed_words,
    );
  }

  late final _wire_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_setup');
  late final _wire_setup = _wire_setupPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_start_nakamoto(
    int port_,
  ) {
    return _wire_start_nakamoto(
      port_,
    );
  }

  late final _wire_start_nakamotoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_start_nakamoto');
  late final _wire_start_nakamoto =
      _wire_start_nakamotoPtr.asFunction<void Function(int)>();

  void wire_stop_nakamoto(
    int port_,
  ) {
    return _wire_stop_nakamoto(
      port_,
    );
  }

  late final _wire_stop_nakamotoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stop_nakamoto');
  late final _wire_stop_nakamoto =
      _wire_stop_nakamotoPtr.asFunction<void Function(int)>();

  void wire_restart_nakamoto(
    int port_,
  ) {
    return _wire_restart_nakamoto(
      port_,
    );
  }

  late final _wire_restart_nakamotoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_restart_nakamoto');
  late final _wire_restart_nakamoto =
      _wire_restart_nakamotoPtr.asFunction<void Function(int)>();

  void wire_get_peer_count(
    int port_,
  ) {
    return _wire_get_peer_count(
      port_,
    );
  }

  late final _wire_get_peer_countPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_peer_count');
  late final _wire_get_peer_count =
      _wire_get_peer_countPtr.asFunction<void Function(int)>();

  void wire_get_tip(
    int port_,
  ) {
    return _wire_get_tip(
      port_,
    );
  }

  late final _wire_get_tipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_tip');
  late final _wire_get_tip = _wire_get_tipPtr.asFunction<void Function(int)>();

  void wire_scan_from(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
    int height,
  ) {
    return _wire_scan_from(
      port_,
      blob,
      height,
    );
  }

  late final _wire_scan_fromPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_scan_from');
  late final _wire_scan_from = _wire_scan_fromPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_wallet_balance(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
  ) {
    return _wire_get_wallet_balance(
      port_,
      blob,
    );
  }

  late final _wire_get_wallet_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_wallet_balance');
  late final _wire_get_wallet_balance = _wire_get_wallet_balancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_receiving_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
  ) {
    return _wire_get_receiving_address(
      port_,
      blob,
    );
  }

  late final _wire_get_receiving_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_receiving_address');
  late final _wire_get_receiving_address = _wire_get_receiving_addressPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_wallet_birthday(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
    int new_birthday,
  ) {
    return _wire_set_wallet_birthday(
      port_,
      blob,
      new_birthday,
    );
  }

  late final _wire_set_wallet_birthdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_set_wallet_birthday');
  late final _wire_set_wallet_birthday = _wire_set_wallet_birthdayPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_spendable_outputs(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
  ) {
    return _wire_get_spendable_outputs(
      port_,
      blob,
    );
  }

  late final _wire_get_spendable_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_spendable_outputs');
  late final _wire_get_spendable_outputs = _wire_get_spendable_outputsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_transaction_size(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt,
  ) {
    return _wire_transaction_size(
      port_,
      psbt,
    );
  }

  late final _wire_transaction_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_transaction_size');
  late final _wire_transaction_size = _wire_transaction_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_fees(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt,
    int subtract_from,
    int fee_rate,
  ) {
    return _wire_update_fees(
      port_,
      psbt,
      subtract_from,
      fee_rate,
    );
  }

  late final _wire_update_feesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr, ffi.Uint64)>>('wire_update_fees');
  late final _wire_update_fees = _wire_update_feesPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_sign_psbt_at(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
    ffi.Pointer<wire_uint_8_list> psbt,
    int input_index,
  ) {
    return _wire_sign_psbt_at(
      port_,
      blob,
      psbt,
      input_index,
    );
  }

  late final _wire_sign_psbt_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Uint32)>>('wire_sign_psbt_at');
  late final _wire_sign_psbt_at = _wire_sign_psbt_atPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_finalize_psbt(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt,
  ) {
    return _wire_finalize_psbt(
      port_,
      psbt,
    );
  }

  late final _wire_finalize_psbtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_finalize_psbt');
  late final _wire_finalize_psbt = _wire_finalize_psbtPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mark_spent_from_transaction(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
    ffi.Pointer<wire_uint_8_list> tx_hex,
  ) {
    return _wire_mark_spent_from_transaction(
      port_,
      blob,
      tx_hex,
    );
  }

  late final _wire_mark_spent_from_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_mark_spent_from_transaction');
  late final _wire_mark_spent_from_transaction =
      _wire_mark_spent_from_transactionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_broadcast_raw_transaction(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx_hex,
  ) {
    return _wire_broadcast_raw_transaction(
      port_,
      tx_hex,
    );
  }

  late final _wire_broadcast_raw_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_broadcast_raw_transaction');
  late final _wire_broadcast_raw_transaction =
      _wire_broadcast_raw_transactionPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_spend_to(
    int port_,
    ffi.Pointer<wire_uint_8_list> spending_request,
  ) {
    return _wire_spend_to(
      port_,
      spending_request,
    );
  }

  late final _wire_spend_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_spend_to');
  late final _wire_spend_to = _wire_spend_toPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int PSBT_SP_SUBTYPE = 0;
